var async = require('async');
var prop = require('mcp_config').prop;
var esdb = require('easy_db');
var Database = esdb.Database;
var Table = esdb.Table;
var Column = esdb.Column;


var esut = require("easy_util");
var log = esut.log;

var DbCenter = function () {
    var self = this;
};

DbCenter.prototype.init = function (cb) {
    var self = this;
    esdb.log.setShowLog(true);
    async.waterfall([
        //the mysql
        function (cb) {
            self._initMain(function (err) {
                if (!err) {
                    log.info('-----数据库初始化完成')
                } else {
                    log.error('-----数据库初始化失败')
                }
                cb(err);
            });
        },
        //the mongodb
        function (cb) {
            self._initMg(function (err) {
                if (!err) {
                    log.info('-----MongoDB初始化完成')
                } else {
                    log.error('-----MongoDB初始化失败')
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype.check = function (cb) {
    var self = this;
    async.waterfall([
        //check the mysql
        function (cb) {
            self._checkMain(function (err) {
                if (!err) {
                    log.info('-----数据库检查项完成')
                } else {
                    log.error('-----数据库检查项失败')
                }
                cb(err);
            });
        },
        //check the mongodb
        function (cb) {
            self._checkMg(function (err) {
                if (!err) {
                    log.info('-----MongoDB检查项完成')
                } else {
                    log.error('-----MongoDB检查项失败')
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype._initMain = function (cb) {
    var self = this;
    var db = new Database(prop.main);
    //add tables
    var loan = new Table(db, "loan", [
        new Column(db, "id", "varchar", 32, true, undefined, true, false),
        new Column(db, "actual_rate", "double", -1, false, undefined),
        new Column(db, "business_type", "varchar", 20, false, undefined),
        new Column(db, "cancel_time", "date", 0, false, undefined),
        new Column(db, "cardinal_number", "double", -1, false, undefined),
        new Column(db, "commit_time", "date", -1, false, undefined),
        new Column(db, "company_description", "longtext", -1, false, undefined),
        new Column(db, "company_name", "text", -1, false, undefined),
        new Column(db, "companyno", "varchar", 255, false, undefined),
        new Column(db, "complete_time", "date", -1, false, undefined),
        new Column(db, "contract_type", "text", -1, false, undefined),
        new Column(db, "custom_picture", "text", -1, false, undefined),
        new Column(db, "deadline", "int", 11, false, undefined),
        new Column(db, "deposit", "double", -1, false, undefined),
        new Column(db, "description", "longtext", -1, false, undefined),
        new Column(db, "expect_time", "date", -1, false, undefined),
        new Column(db, "fee_on_repay", "double", -1, false, undefined),
        new Column(db, "fund_description", "longtext", -1, false, undefined),
        new Column(db, "give_money_time", "date", -1, false, undefined),
        new Column(db, "guarantee_company_description", "longtext", -1, false, undefined),
        new Column(db, "guarantee_company_name", "text", -1, false, undefined),
        new Column(db, "guarantee_info_description", "longtext", -1, false, undefined),
        new Column(db, "has_pawn", "varchar", 10, false, undefined),
        new Column(db, "interest_begin_time", "date", -1, false, undefined),
        new Column(db, "investor_fee_rate", "double", -1, false, undefined),
        new Column(db, "loan_gurantee_fee", "double", -1, false, undefined),
        new Column(db, "loan_instruction", "longtext", -1, false, undefined),
        new Column(db, "loan_money", "double", -1, false, undefined),
        new Column(db, "loan_purpose", "varchar", 500, false, undefined),
        new Column(db, "location", "text", -1, false, undefined),
        new Column(db, "min_invest_money", "double", -1, false, undefined),
        new Column(db, "money", "double", -1, false, undefined),
        new Column(db, "name", "varchar", 100, false, undefined),
        new Column(db, "overdue_info", "varchar", 100, false, undefined),
        new Column(db, "pawn", "varchar", 200, false, undefined),
        new Column(db, "pawn_name", "varchar", 200, false, undefined),
        new Column(db, "policy_description", "longtext", -1, false, undefined),
        new Column(db, "jk_rate", "double", -1, false, undefined),
        new Column(db, "repay_day", "date", -1, false, undefined),
        new Column(db, "repay_period", "varchar", -1, false, undefined),
        new Column(db, "risk_description", "longtext", -1, false, undefined),
        new Column(db, "risk_instruction", "longtext", -1, false, undefined),
        new Column(db, "risk_level", "varchar", 50, false, undefined),
        new Column(db, "seq_num", "int", 11, false, undefined),
        new Column(db, "status", "varchar", 50, false, undefined),
        new Column(db, "verified", "varchar", 32, false, undefined),
        new Column(db, "verify_message", "varchar", 500, false, undefined),
        new Column(db, "verify_time", "date", -1, false, undefined),
        new Column(db, "video_id", "varchar", 255, false, undefined),
        new Column(db, "type", "varchar", 64, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined),
        new Column(db, "verify_user_id", "varchar", 32, false, undefined),
        new Column(db, "max_invest_money", "double", -1, false, undefined),
        new Column(db, "order_code", "varchar", 50, false, undefined),
        new Column(db, "transfer_type", "text", -1, false, undefined),
        new Column(db, "rate_iboi", "double", -1, false, undefined),
        new Column(db, "publish_time", "date", -1, false, undefined),
        new Column(db, "hd_rate", "double", -1, false, undefined),
        new Column(db, "invest_password", "varchar", 20, false, undefined),
        new Column(db, "loan_activity_type", "varchar", 20, false, undefined),
        new Column(db, "compensation_user_id", "varchar", 32, false, undefined),
        new Column(db, "banner_description", "longtext", -1, false, undefined),
        new Column(db, "super_user_id", "varchar", 32, false, undefined),
        new Column(db, "loan_info", "varchar", 32, false, undefined),
        new Column(db, "info_five", "varchar", 200, false, undefined),
        new Column(db, "info_four", "varchar", 200, false, undefined),
        new Column(db, "info_one", "varchar", 1000, false, undefined),
        new Column(db, "info_six", "varchar", 200, false, undefined),
        new Column(db, "info_three", "varchar", 200, false, undefined),
        new Column(db, "info_time", "date", -1, false, undefined),
        new Column(db, "info_two", "varchar", 200, false, undefined),
        new Column(db, "repay_day_of_month", "int", 11, false, undefined),
        new Column(db, "repay_time", "date", -1, false, undefined)
    ]);
    db.put(loan);

    var managelog = new Table(db, "managelog", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "create_time", "date", -1, false, undefined),
        new Column(db, "des", "varchar", 50, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined)
    ]);
    db.put(managelog);


    var invest = new Table(db, "invest", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "interest", "double", -1, false, undefined),
        new Column(db, "money", "double", -1, false, undefined),
        new Column(db, "paid_interest", "decimal", 10, false, undefined),
        new Column(db, "paid_money", "decimal", 10, false, undefined),
        new Column(db, "rate", "double", -1, false, undefined),
        new Column(db, "status", "varchar", 50, false, undefined),
        new Column(db, "time", "date", -1, false, undefined),
        new Column(db, "type", "varchar", 100, false, undefined),
        new Column(db, "loan_id", "varchar", 32, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined),
        new Column(db, "is_auto_invest", "tinyint", 1, false, undefined),
        new Column(db, "paid_penalty", "decimal", 10, false, undefined),
        new Column(db, "user_coupon", "varchar", 32, false, undefined),
        new Column(db, "invest_money", "double", -1, false, undefined),
        new Column(db, "user_coupon", "varchar", 32, false, undefined),
        new Column(db, "remark", "varchar", 1024, false, undefined),
        new Column(db, "contractId", "varchar", 48, false, undefined),
        new Column(db, "investFlag", "varchar", 1, false, undefined)
    ]);
    db.put(invest);


    var user_bill = new Table(db, "user_bill", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "detail", "varchar", 200, false, undefined),
        new Column(db, "money", "double", -1, false, undefined),
        new Column(db, "seq_num", "int", 11, false, undefined),
        new Column(db, "time", "date", -1, false, undefined),
        new Column(db, "type_info", "varchar", 320, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined),
        new Column(db, "type", "varchar", 200, false, undefined),
        new Column(db, "balance", "double", -1, false, undefined),
        new Column(db, "frozen_money", "double", -1, false, undefined),
        new Column(db, "chk_val", "varchar", 1024, false, undefined)
    ]);
    db.put(user_bill);

    self.main = db;
    self.main.init(cb);
};


DbCenter.prototype._initMg = function (cb) {
    var self = this;
    var db = new Database(prop.mg);
    //add tables
    var customer = new Table(db, "customer", [
        new Column(db, "id", "bigint", -1, false, undefined, true, true),
        new Column(db, "userId", "varchar", 10, false, undefined),
        new Column(db, "name", "varchar", 10, false, undefined),
        new Column(db, "st", "varchar", 32, false, undefined),
        new Column(db, "type", "bigint", -1, false, undefined),
        new Column(db, "createTime", "date", -1, false, undefined)
    ]);
    db.put(customer);

    var mcp_id = new Table(db, "mcp_id", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "value", "bigint", -1, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(mcp_id);
    self.mg = db;
    self.mg.init(cb);
};


DbCenter.prototype._checkMain = function (cb) {
    var self = this;
    cb(null);
};

DbCenter.prototype._checkMg = function (cb) {
    var self = this;
    var kvTable = self.mg.get("mcp_id");
    async.waterfall([
        function (cb) {
            kvTable.findOne({_id: "loanId"}, {}, [], function (err, data) {
                if (err) {
                    cb(err);
                }
                if (!data) {
                    kvTable.save({_id: "loanId", value: 1}, [], function (err, data) {
                        cb(err);
                    });
                }
                else {
                    cb(null);
                }
            });
        },
        function (cb) {
            kvTable.findOne({_id: "investId"}, {}, [], function (err, data) {
                if (err) {
                    cb(err);
                    return;
                }
                if (!data) {
                    kvTable.save({_id: "investId", value: 1}, [], function (err, data) {
                        cb(err);
                    });
                }
                else {
                    cb(null);
                }
            });
        }
    ], function (err, result) {
        cb(err);
    });


};


module.exports = new DbCenter();

