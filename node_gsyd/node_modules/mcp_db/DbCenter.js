var async = require('async');
var prop = require('mcp_config').prop;
var esdb = require('easy_db');
var Database = esdb.Database;
var Table = esdb.Table;
var Column = esdb.Column;


var esut = require("easy_util");
var log = esut.log;

var DbCenter = function () {
    var self = this;
};

DbCenter.prototype.init = function (cb) {
    var self = this;
    esdb.log.setShowLog(true);
    async.waterfall([
        //the mysql
        function (cb) {
            self._initMain(function (err) {
                if (!err) {
                    log.info('-----数据库初始化完成')
                } else {
                    log.error('-----数据库初始化失败')
                }
                cb(err);
            });
        },
        //the mongodb
        function (cb) {
            self._initMg(function (err) {
                if (!err) {
                    log.info('-----MongoDB初始化完成')
                } else {
                    log.error('-----MongoDB初始化失败')
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype.check = function (cb) {
    var self = this;
    async.waterfall([
        //check the mysql
        function (cb) {
            self._checkMain(function (err) {
                if (!err) {
                    log.info('-----数据库检查项完成')
                } else {
                    log.error('-----数据库检查项失败')
                }
                cb(err);
            });
        },
        //check the mongodb
        function (cb) {
            self._checkMg(function (err) {
                if (!err) {
                    log.info('-----MongoDB检查项完成')
                } else {
                    log.error('-----MongoDB检查项失败')
                }
                cb(err);
            });
        }
    ], function (err, result) {
        cb(err);
    });
};

DbCenter.prototype._initMain = function (cb) {
    var self = this;
    var db = new Database(prop.main);
    //add tables
    var loan = new Table(db, "loan", [
        new Column(db, "id", "varchar", 32, true, undefined, true, false),
        new Column(db, "name", "varchar", 50, false, undefined),
        new Column(db, "repay_user_id", "varchar", 32, false, undefined),
        new Column(db, "borrow_user_id", "varchar", 32, false, undefined),
        new Column(db, "repay_type", "varchar", 32, false, undefined),
        new Column(db, "deadline", "int", -1, false, undefined),
        new Column(db, "agreement", "varchar", 32, false, undefined),
        new Column(db, "live_money", "int", -1, false, undefined),
        new Column(db, "live_start", "date", -1, false, undefined),
        new Column(db, "live_end", "date", -1, false, undefined),
        new Column(db, "money", "int", -1, false, undefined),
        new Column(db, "loan_money", "int", -1, false, undefined),
        new Column(db, "min_invest", "int", -1, false, undefined),
        new Column(db, "max_invest", "int", -1, false, undefined),
        new Column(db, "raise_invest", "int", -1, false, undefined),
        new Column(db, "rate", "double", -1, false, undefined),
        new Column(db, "st_rate", "double", -1, false, undefined),
        new Column(db, "advance_penalty", "double", -1, false, undefined),
        new Column(db, "over_penalty", "double", -1, false, undefined),
        new Column(db, "over_interest", "double", -1, false, undefined),
        new Column(db, "loan_type", "varchar", 32, false, undefined),
        new Column(db, "contract_id", "varchar", 32, false, undefined),
        new Column(db, "accrue_time", "date", -1, false, undefined),
        new Column(db, "final_time", "date", -1, false, undefined),
        new Column(db, "day_month", "varchar", 5, false, undefined),
        new Column(db, "raise_time", "date", -1, false, undefined),
        new Column(db, "activity", "varchar", 32, false, undefined),
        new Column(db, "loan_info_id", "varchar", 32, false, undefined),
        new Column(db, "status", "int", -1, false, undefined),
        new Column(db, "create_time", "date", -1, false, undefined)
    ]);
    db.put(loan);

    var managelog = new Table(db, "managelog", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "create_time", "date", -1, false, undefined),
        new Column(db, "des", "varchar", 50, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined)
    ]);
    db.put(managelog);

    var dict = new Table(db, "dict", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "pid", "varchar", 100, false, undefined),
        new Column(db, "code", "varchar", 100, false, undefined),
        new Column(db, "name", "varchar", 500, false, undefined),
        new Column(db, "status", "int", -1, false, undefined),
        new Column(db, "type", "int", -1, false, undefined),
        new Column(db, "seqnum", "int", -1, false, undefined)
    ]);
    db.put(dict);


    var repay_type = new Table(db, "repay_type", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "name", "varchar", 100, false, undefined),
        new Column(db, "description", "varchar", 1000, false, undefined),
        new Column(db, "point", "int", -1, false, undefined),
        new Column(db, "type", "varchar", 100, false, undefined),
        new Column(db, "unit", "varchar", 10, false, undefined)
    ]);
    db.put(repay_type);


    var invest = new Table(db, "invest", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "interest", "double", -1, false, undefined),
        new Column(db, "money", "double", -1, false, undefined),
        new Column(db, "paid_interest", "decimal", 10, false, undefined),
        new Column(db, "paid_money", "decimal", 10, false, undefined),
        new Column(db, "rate", "double", -1, false, undefined),
        new Column(db, "status", "varchar", 50, false, undefined),
        new Column(db, "time", "date", -1, false, undefined),
        new Column(db, "type", "varchar", 100, false, undefined),
        new Column(db, "loan_id", "varchar", 32, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined),
        new Column(db, "is_auto_invest", "tinyint", 1, false, undefined),
        new Column(db, "paid_penalty", "decimal", 10, false, undefined),
        new Column(db, "user_coupon", "varchar", 32, false, undefined),
        new Column(db, "invest_money", "double", -1, false, undefined),
        new Column(db, "user_coupon", "varchar", 32, false, undefined),
        new Column(db, "remark", "varchar", 1024, false, undefined),
        new Column(db, "contractId", "varchar", 48, false, undefined),
        new Column(db, "investFlag", "varchar", 1, false, undefined)
    ]);
    db.put(invest);


    var user_bill = new Table(db, "user_bill", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "detail", "varchar", 200, false, undefined),
        new Column(db, "money", "double", -1, false, undefined),
        new Column(db, "seq_num", "int", 11, false, undefined),
        new Column(db, "time", "date", -1, false, undefined),
        new Column(db, "type_info", "varchar", 320, false, undefined),
        new Column(db, "user_id", "varchar", 32, false, undefined),
        new Column(db, "type", "varchar", 200, false, undefined),
        new Column(db, "balance", "double", -1, false, undefined),
        new Column(db, "frozen_money", "double", -1, false, undefined),
        new Column(db, "chk_val", "varchar", 1024, false, undefined)
    ]);
    db.put(user_bill);


    var user = new Table(db, "user", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "username", "varchar", 50, false, undefined),
        new Column(db, "password", "varchar", 100, false, undefined),
        new Column(db, "status", "int", -1, false, undefined),
        new Column(db, "email", "varchar", 100, false, undefined),
        new Column(db, "realname", "varchar", 100, false, undefined),
        new Column(db, "sex", "int", -1, false, undefined),
        new Column(db, "birthday", "date", -1, false, undefined),
        new Column(db, "mobile", "varchar", 18, false, undefined),
        new Column(db, "card", "varchar", 20, false, undefined),
        new Column(db, "createTime", "date", -1, false, undefined),
        new Column(db, "photo", "varchar", 500, false, undefined),
        new Column(db, "referrer", "varchar", 32, false, undefined),
        new Column(db, "qq", "varchar", 20, false, undefined),
        new Column(db, "permission", "int", -1, false, undefined)
    ]);
    db.put(user);

    var menu = new Table(db, "menu", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "name", "varchar", 100, false, undefined),
        new Column(db, "type", "varchar", 20, false, undefined),
        new Column(db, "url", "varchar", 1000, false, undefined),
        new Column(db, "description", "varchar", 1000, false, undefined),
        new Column(db, "status", "int", -1, false, undefined),
        new Column(db, "level", "int", -1, false, undefined),
        new Column(db, "pid", "varchar", 32, false, undefined),
        new Column(db, "seqnum", "int", -1, false, undefined)
    ]);
    db.put(menu);

    var role_menu = new Table(db, "role_menu", [
        new Column(db, "role_id", "varchar", 32, false, undefined, true, false),
        new Column(db, "menu_id", "varchar", 32, false, undefined, true, false)
    ]);
    db.put(role_menu);

    var user_role = new Table(db, "user_role", [
        new Column(db, "role_id", "varchar", 32, false, undefined, true, false),
        new Column(db, "user_id", "varchar", 32, false, undefined, true, false)
    ]);
    db.put(user_role);

    var role = new Table(db, "role", [
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "name", "varchar", 100, false, undefined),
        new Column(db, "description", "varchar", 1000, false, undefined)
    ]);
    db.put(role);

    var node = new Table(db, "node",[
        new Column(db, "id", "varchar", 32, false, undefined, true, false),
        new Column(db, "title", "varchar", 100, true, undefined),
        new Column(db, "subtitle", "varchar", 100, true, undefined),
        new Column(db, "body", "longtext", -1, true, undefined),
        new Column(db, "status", "varchar", 20, false, undefined),
        new Column(db, "keywords", "text", -1, true, undefined),
        new Column(db, "description", "text", -1, true, undefined),
        new Column(db, "version", "double", -1, true, undefined),
        new Column(db, "create_time", "date", -1, false, undefined),
        new Column(db, "update_time", "date", -1, false, undefined),
        new Column(db, "creator", "varchar", 32, false, undefined),
        new Column(db, "last_modify_user", "varchar", 32, true, undefined),
        new Column(db, "seq_num", "int", 11, true, undefined),
        new Column(db, "thumb", "varchar", 80, true, undefined),
        new Column(db, "category_term_code", "varchar", 10, false, undefined)
    ]);
    db.put(node);
    self.main = db;
    self.main.init(cb);
};


DbCenter.prototype._initMg = function (cb) {
    var self = this;
    var db = new Database(prop.mg);
    //add tables
    var customer = new Table(db, "customer", [
        new Column(db, "_id", "bigint", -1, false, undefined, true, true),
        new Column(db, "userId", "varchar", 10, false, undefined),
        new Column(db, "name", "varchar", 10, false, undefined),
        new Column(db, "st", "varchar", 32, false, undefined),
        new Column(db, "type", "bigint", -1, false, undefined),
        new Column(db, "createTime", "date", -1, false, undefined)
    ]);
    db.put(customer);

    var mcp_id = new Table(db, "mcp_id", [
        new Column(db, "_id", "varchar", 80, false, undefined, true, false),
        new Column(db, "value", "bigint", -1, false, undefined),
        new Column(db, "version", "int", 11, false, 0)
    ]);
    db.put(mcp_id);

    var task = new Table(db, "task", [
        new Column(db, "_id", "bigint", -1, false, undefined, true, true),
        new Column(db, "loan_id", "varchar", 80, false, undefined),
        new Column(db, "description", "varchar", 200, false, undefined),
        new Column(db, "type", "bigint", -1, false, undefined),
        new Column(db, "fireTime", "date", -1, false, undefined)
    ]);
    db.put(task);
    self.mg = db;
    self.mg.init(cb);
};


DbCenter.prototype._checkMain = function (cb) {
    var self = this;
    cb(null);
};

DbCenter.prototype._checkMg = function (cb) {
    var self = this;
    var kvTable = self.mg.get("mcp_id");
    async.waterfall([
        function (cb) {
            kvTable.findOne({_id: "loanId"}, {}, [], function (err, data) {
                if (err) {
                    cb(err);
                }
                if (!data) {
                    kvTable.save({_id: "loanId", value: 1}, [], function (err, data) {
                        cb(err);
                    });
                }
                else {
                    cb(null);
                }
            });
        },
        function (cb) {
            kvTable.findOne({_id: "investId"}, {}, [], function (err, data) {
                if (err) {
                    cb(err);
                    return;
                }
                if (!data) {
                    kvTable.save({_id: "investId", value: 1}, [], function (err, data) {
                        cb(err);
                    });
                }
                else {
                    cb(null);
                }
            });
        }
    ], function (err, result) {
        cb(err);
    });


};


module.exports = new DbCenter();

