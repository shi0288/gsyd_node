/**
 * Created by shiqm on 16-3-15.
 */
'use strict';


var amqp = require('amqplib/callback_api');

var esut = require("easy_util");
var log = esut.log;

var config = require("mcp_config");
var prop = config.prop;

var MqSource = function () {
    var self = this;
};

MqSource.prototype.init = function (mq, cb) {
    var self = this;
    self.mq = mq;
    if (self.conn) {
        cb(null);
    } else {
        amqp.connect('amqp://'+prop.mq.host, {'noDelay': true}, function (err, conn) {
            self.conn = conn;
            if (!err) {
                log.info('-----MQ连线初始化成功');
                process.once('SIGINT', function () {
                    self.conn.close();
                });
            }
            cb(err);
        });
    }
};

MqSource.prototype.bail = function (err, conn) {
    if (err) {
        conn.close();
    }
};


MqSource.prototype.send = function (queueSend, content, cb) {
    var self = this;
    self.conn.createChannel(function (err, ch) {
        if (err !== null) {
            cb(err);
            return self.bail(err, self.conn);
        }
        ch.assertQueue(self.mq, {durable: false}, function (err, ok) {
            if (err !== null) {
                cb(err);
                return self.bail(err, self.conn);
            }
            ch.consume(self.mq, function (msg) {
                cb(null, msg.content.toString());
                ch.ack(msg);
                ch.close();
            }, {noAck: false});
            log.info(" servce send:" + content);
            ch.sendToQueue(queueSend, new Buffer(content), {replyTo: self.mq})
        })
    })
};


var mqSource = new MqSource();
module.exports = mqSource;