var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userBillCons = cons.userBillCons;

var async = require('async');

var util = require('easy_util');
var arithUtil = util.arithUtil;
var digestUtil = util.digestUtil;


var UserBillService = function () {
};

UserBillService.prototype.getLastestBill = function (userId, cb) {
    var self = this;
    var userBillTab = dc.main.get('user_bill');
    var cursor = userBillTab.find({user_id: userId}, {}, []).sort({seq_num: 0}).limit(0, 1);
    async.waterfall([
        function (cb) {
            cursor.dateToString();
            cursor.toArray(function (err, data) {
                if (err) {
                    cb(err);
                } else {
                    if (data.length == 1) {
                        var bill = data[0];
                        cb(err, bill);
                    } else {
                        cb(err, null);
                    }
                }
            });
        }
    ], function (err, rst) {
        cb(err, rst);
    });
};


/**
 * 冻结金额
 *
 * @param userId
 *            用户的id
 * @param money
 *            金额
 * @param operatorInfo
 *            资金转移的操作类型
 * @param operatorDetail
 *            资金转移的详述
 */


UserBillService.prototype.freezeMoney = function (userId, money, operatorInfo, operatorDetail, cb) {
    var self = this;
    if (money < 0) {
        cb(true);
        return;
    }
    var userBillTab = dc.main.get('user_bill');
    userBillTab.lock('user',userId,function (conn,cb) {
        self.getLastestBill(userId, function (err, userBillLaste) {
            if (err) {
                cb(true);
            } else {
                var cond = {};
                cond.id = digestUtil.createUUID();
                cond.money = money;
                cond.time = new Date();
                cond.detail = operatorDetail;
                cond.type = userBillCons.type.FREEZE;
                cond.type_info = operatorInfo;
                cond.user_id = userId;
                if (userBillLaste) {
                    cond.seq_num = userBillLaste.seq_num + 1;
                    cond.balance = arithUtil.sub(userBillLaste.balance, money);
                    cond.frozen_money = arithUtil.add(userBillLaste.frozen_money, money);
                } else {
                    cond.seq_num = 1;
                    cond.balance = 0;
                    cond.frozen_money = 0;
                }
                userBillTab.save(cond,[],function(err,data){
                    cb(err,data);
                },conn);
            }
        })
    }, cb);
};


UserBillService.prototype.getSumByType = function (userId, type, cb) {
    var sql = "select ifnull(sum(ub.money),0) as sumMoney from user_bill ub where ub.user_id ='" + userId + "' and ub.type='" + type + "'";
    var conn = dc.main.getConn();
    console.log("sql: " + sql);
    conn.execute(sql, {}, function (err, data) {
        if (err) {
            console.log(err);
            cb(err);
        } else {
            cb(null, data.sumMoney);
        }
    });
};


module.exports = new UserBillService();