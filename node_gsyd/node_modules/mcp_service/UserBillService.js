var dc = require('mcp_db').dc;

var cons = require('mcp_constants');
var userBillCons = cons.userBillCons;

var async = require('async');

var util = require('easy_util');
var arithUtil = util.arithUtil;


var UserBillService = function () {};


UserBillService.prototype.getLastestBill = function (userId, cb) {
    var self = this;
    var userBillTab = dc.main.get('user_bill');
    var cursor = userBillTab.find({user_id: userId}, {}, []).sort({seq_num: 0}).limit(0, 1);
    async.waterfall([
        function (cb) {
            cursor.count(function (err, count) {
                cb(err, count);
            });
        },
        function (count, cb) {
            if (count == 1) {
                cursor.dateToString();
                cursor.toArray(function (err, data) {
                    if (data.balance == undefined || data.balance == null || data.frozen_money == undefined || data.frozen_money == null ) {
                        var freeze = 0;
                        var transferIntoBalance = 0;
                        var transferOutFromBalance = 0;
                        var unfreeze = 0;
                        var transferOutFromFrozen = 0;
                        async.waterfall([
                            function (cb) {
                                self.getSumByType(userId, userBillCons.FREEZE, function (err, freeze) {
                                    freeze = freeze;
                                    cb(err);
                                })
                            },
                            function (cb) {
                                self.getSumByType(userId, userBillCons.TI_BALANCE, function (err, transferIntoBalance) {
                                    transferIntoBalance = transferIntoBalance;
                                    cb(err);
                                })
                            },
                            function (cb) {
                                self.getSumByType(userId, userBillCons.TO_BALANCE, function (err, transferOutFromBalance) {
                                    transferOutFromBalance = transferOutFromBalance;
                                    cb(err);
                                })
                            },
                            function (cb) {
                                self.getSumByType(userId, userBillCons.UNFREEZE, function (err, unfreeze) {
                                    unfreeze = unfreeze;
                                    cb(err);
                                })
                            },
                            function (cb) {
                                self.getSumByType(userId, userBillCons.TO_FROZEN, function (err, transferOutFromFrozen) {
                                    transferOutFromFrozen = transferOutFromFrozen;
                                    cb(err);
                                })
                            }
                        ], function (err) {
                            if(data.balance == undefined || data.balance == null ){
                                var tempBlance = arithUtil.sub(transferIntoBalance, transferOutFromBalance);
                                tempBlance = arithUtil.sub(tempBlance, freeze);
                                tempBlance = arithUtil.add(tempBlance, unfreeze);
                                data.balance = tempBlance;
                            }
                            if(data.frozen_money == undefined || data.frozen_money == null ){
                                var tempFrozen_money = arithUtil.sub(freeze, unfreeze);
                                tempFrozen_money = arithUtil.sub(tempFrozen_money, transferOutFromFrozen);
                                data.frozen_money = tempFrozen_money;
                            }


                            cb(err, data);
                        });


                    }
                });
            } else {
                cb(null, null);
            }
        }
    ], function (err, rst) {
        cb(err, rst);
    });
};


/**
 * 冻结金额
 *
 * @param userId
 *            用户的id
 * @param money
 *            金额
 * @param operatorInfo
 *            资金转移的操作类型
 * @param operatorDetail
 *            资金转移的详述
 */


UserBillService.prototype.freezeMoney = function (userId, money, operatorInfo, operatorDetail, cb) {
    if (money < 0) {
        cb(true);
        return;
    }
    var userBillTab = dc.main.get('userbill');
};


UserBillService.prototype.getSumByType = function (userId, type, cb) {
    var sql = "select ifnull(sum(ub.money),0) as sumMoney from user_bill ub where ub.user_id ='" + userId + "' and ub.type='" + type + "'";
    var conn = dc.main.getConn();
    console.log("sql: " + sql);
    conn.execute(sql, {}, function (err, data) {
        if (err) {
            console.log(err);
            cb(err);
        } else {
            cb(null, data.sumMoney);
        }
    });
};


module.exports = new UserBillService();