/**
 * Created by shiqm on 16-3-24.
 */
'use strict';

var dc = require('mcp_db').dc;

var esul = require('easy_util');
var digestUtil = esul.digestUtil;

var util = require('mcp_util');
var objectUtil = util.objectUtil;

var async = require('async');

var AdminService = function () {
};

AdminService.prototype.login = function (username, password, cb) {
    var conn = dc.main.getConn();
    var tag = false;
    var tempPass = digestUtil.sha1(password);
    var sql = "SELECT * FROM user tu,user_role tur,role_permission trp " +
        "where tu.id=tur.user_id and tu.username='" + username + "' and tu.password='" + tempPass + "' " +
        "and tur.role_id= trp.role_id and trp.permission_id='ROLE_ADMIN'";
    conn.execute(sql, [], function (err, data) {
        if (err) {
            cb(err);
        } else {
            if (data.length > 0) {
                tag = true;
            }
            cb(null, tag);
        }
    })
};


AdminService.prototype.getMenu = function (username, cb) {
    var self = this;
    var conn = dc.main.getConn();
    var sql = "SELECT  DISTINCT tm.id,tm.label,tm.url,tm.pid  FROM user_role tur ,role_permission trp,permission tp,menu_permission tmp,menu tm " +
        "WHERE tur.user_id='" + username + "' and tur.role_id = trp.role_id  and tp.id=trp.permission_id   " +
        "and tmp.permission_id=tp.id and tm.id=tmp.menu_id  and tm.type='Management'and tm.enable=1 order by tm.seq_num";
    console.log(sql);
    conn.execute(sql, [], function (err, allMenuArr) {
        if (err) {
            cb(err);
        } else {
            self.getMenuTree(allMenuArr, null, null, 1, function (err, tempArr) {
                cb(err, tempArr);
            })
        }
    });
};

AdminService.prototype.getMenuTree = function (allMenuArr, menu, tempArr, lever, cb) {
    console.log(allMenuArr.length);
    var self = this;
    if (objectUtil.isNull(tempArr)) {
        tempArr = new Array();
    }
    if (objectUtil.isNull(menu)) {
        lever = 1;
    }
    else {
        lever++;
    }
    var i = -1;
    async.eachSeries(allMenuArr, function (menuCategory, callback) {
        i++;
        if (objectUtil.isNull(menuCategory)) {
            callback(null);
        } else {
            var pid = menuCategory.pid;
            var menu_id = null;
            if (!objectUtil.isNull(menu)) {
                menu_id = menu.id;
            }
            if ((objectUtil.isNull(menu) && objectUtil.isNull(pid)) || (!objectUtil.isNull(menuCategory) && menu_id == pid )) {
                menuCategory.lever = lever;
                tempArr.push(menuCategory);
                delete allMenuArr[i];
                self.hasChildren(menuCategory, allMenuArr, function (err, tag) {
                    if (err) {
                        callback(err);
                    } else {
                        if (tag) {
                            self.getMenuTree(allMenuArr, menuCategory, tempArr, lever, function (err, data) {
                                tempArr = data;
                                callback(null);
                            })
                        } else {
                            callback(null);
                        }
                    }
                });
            } else {
                callback(null);
            }
        }
    }, function (err) {
        cb(err, tempArr);
    });
};

AdminService.prototype.hasChildren = function (menu, allMenuArr, cb) {
    var tag = false;
    for (var key in allMenuArr) {
        var menuCategory = allMenuArr[key];
        if (menuCategory.pid == menu.id) {
            tag = true;
            break;
        }
    }
    cb(null, tag);
};


module.exports = new AdminService();