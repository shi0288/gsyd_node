var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;

var cons = require('mcp_constants');
var userType = cons.userType;
var investStatus = cons.investStatus;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var source = require('mcp_source');
var mqSource=source.mqSource;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;

var InvestControl = function () {
};

InvestControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  IC01 投资
 */

InvestControl.prototype.checkIC01 = function (headNode, bodyNode, cb) {
    cb(null);
};

InvestControl.prototype.handleIC01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //生成id号
        function (cb) {
            kvService.getInvestId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取InvestId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, id);
                }
            });
        },
        //插入数据
        function (id, cb) {
            var investTab = dc.main.get('invest');
            var nodeParams = {};
            nodeParams.loan_id = bodyNode.loanId;
            nodeParams.invest_money = bodyNode.money;
            nodeParams.money = bodyNode.money;
            nodeParams.user_id = bodyNode.userId;
            nodeParams.time = new Date();
            nodeParams.status = investStatus.cancel;
            nodeParams.id = id;
            investTab.save(nodeParams, [], function (err) {
                if (err) {
                    cb(ec.E9050);
                } else {
                    cb(ec.E0000);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  IC02 确认投资
 */

InvestControl.prototype.checkIC02 = function (headNode, bodyNode, cb) {
    cb(null);
};

InvestControl.prototype.handleIC02 = function (headNode, bodyNode, cb) {
    mqSource.send("server","back",JSON.stringify(bodyNode),function(err,data){
        if(err){
            log.error(err);
            cb(ec.E9999);
        }else{
            if(data){
                cb(null);
            }else{
                cb(ec.E4000);
            }
        }
    });

};


InvestControl.prototype.checkIC03 = function (headNode, bodyNode, cb) {
    cb(null);
};

InvestControl.prototype.handleIC03 = function (headNode, bodyNode, cb) {
    var table = dc.main.get(bodyNode.table);
    var cursor = table.find({}, {}, []).sort(bodyNode.sort).limit(bodyNode.skip, bodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function (err, data) {
        if (err) {
            cb(ec.E9999);
        }
        var backBodyNode = {};
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            if (count > 1000) {
                cb(ec.E9999);
            }else{
                table.save(bodyNode.cond, [], function (err) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                });

            }
        });
    });

};


var investControl = new InvestControl();
module.exports = investControl;