var async = require('async');
var dc = require('mcp_db').dc;

var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;
var cons = require('mcp_constants');
var userType = cons.userType;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;

var AccountControl = function () {
};

AccountControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);
        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  AC01 账户记录查询
 */

AccountControl.prototype.checkAC01 = function (headNode, bodyNode, cb) {
    cb(null);
};


AccountControl.prototype.handleAC01 = function (headNode, bodyNode, cb) {
    var termTable = dc.mg.get("userbill");
    var cursor = termTable.find(bodyNode.cond, bodyNode.fields).sort(bodyNode.sort).skip(bodyNode.skip).limit(bodyNode.limit);
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
            set.create_time = dateUtil.toString(set.create_time);
        }
        var backBodyNode = {};
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function (err, count) {
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  AC02 账户操作
 */

AccountControl.prototype.checkAC02 = function (headNode, bodyNode, cb) {
    cb(null);
};


AccountControl.prototype.handleAC02 = function (headNode, bodyNode, cb) {
    var accountTab = dc.main.get('account');
    async.waterfall([
        //获取余额信息
        function (cb) {
            accountTab.findOne({user_id: bodyNode.cond.user_id}, {}, [], function (err, accountObj) {
                cb(null, accountObj);
            })
        },
        function (accountObj, cb) {
            var money = accountObj.money;
            var frozen_money = accountObj.frozen_money;
            bodyNode.cond.proMoney = money;
            switch (bodyNode.type) {
                //增加月额
                case 'addToBalance':
                    //余额
                    money = money + bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case 'subToBalance':
                    //余额
                    money = money - bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case 'balanceToFrozen':
                    //余额
                    money = money - bodyNode.cond.money;
                    frozen_money = frozen_money + bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case 'frozenToBalance':
                    //余额
                    money = money + bodyNode.cond.money;
                    frozen_money = frozen_money - bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                case 'subToFrozen':
                    frozen_money = frozen_money - bodyNode.cond.money;
                    //记录
                    bodyNode.cond.afterMoney = money;
                    bodyNode.cond.frozenMoney = frozen_money;
                    cb(null, money, frozen_money, bodyNode.cond);
                    break;
                default:
                    cb(ec.E3070);
            }
        },
        function (money, frozen_money, userBill) {
            var userBillTab = dc.mg.get('userbill');
            userBill.create_time = new Date().getTime();
            userBillTab.save(userBill, [], function (err, _r1) {
                accountTab.update({user_id: userBill.user_id}, {
                    $set: {
                        money: money,
                        froze_money: frozen_money,
                        update_time: dateUtil.getCurTime()
                    }
                }, [], function (err, _r2) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                })
            });
        }
    ], function (err) {
        cb(err);
    });
};


var accountControl = new AccountControl();
module.exports = accountControl;