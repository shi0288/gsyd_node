var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;

var moment = require('moment');

var cons = require('mcp_constants');
var userType = cons.userType;
var loanStatus = cons.loanStatus;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;

var LoanControl = function () {
};

LoanControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle'+headNode.cmd] === 'function') {
                cb(null);
            }else{
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC01 创建项目
 */

LoanControl.prototype.checkLC01 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //生成id号
        function (cb) {
            kvService.getLoanId(function (err, data) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, data);
                }
            });
        },
        //插入数据
        function (data, cb) {
            bodyNode.status = loanStatus.waiting_verify;
            bodyNode.id = data.value;
            var loan = dc.main.get('loan');
            loan.save(bodyNode, [], function (err) {
                if (err) {
                    cb(ec.E9050);
                } else {
                    cb(null);
                }
            });
        }
    ], function (err) {
        cb(err);
    });

};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC02 初审项目
 */

LoanControl.prototype.checkLC02 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC02 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.raising}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC03 放款
 */

LoanControl.prototype.checkLC03 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC03 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.repaying}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC04 延期
 */

LoanControl.prototype.checkLC04 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC04 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.raising}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC05 流标
 */

LoanControl.prototype.checkLC05 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC05 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.cancel}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC06 编辑更新
 */

LoanControl.prototype.checkLC06 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC06 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.cancel}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC07 查询项目
 */

LoanControl.prototype.checkLC07 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC07 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.findOne({id: bodyNode.id}, bodyNode.files, [], function (err, data) {
        if (data) {
            var bodyNodeBack = {};
            bodyNodeBack.loan = data;
            cb(err, bodyNodeBack);
        }
        else {
            cb(ec.E3000);
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC08 查询项目列表
 */

LoanControl.prototype.checkLC08 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC08 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    var cursor = table.find(bodyNode.cond, bodyNode.files, []).sort(bodyNode.sort).limit(bodyNode.skip, bodyNode.limit);
    cursor.dateToString();
    cursor.toArray(function(err, data){
        for(var key in data)
        {
            var set = data[key];
        }
        backBodyNode.rst = data;
        backBodyNode.count = cursor.count(function(err, count){
            backBodyNode.count = count;
            cb(null, backBodyNode);
        });
    });
};

var loanControl = new LoanControl();
module.exports = loanControl;