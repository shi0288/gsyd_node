var async = require('async');
var dc = require('mcp_db').dc;
var esut = require('easy_util');
var log = esut.log;
var digestUtil = esut.digestUtil;
var dateUtil = esut.dateUtil;

var cons = require('mcp_constants');
var userType = cons.userType;
var loanStatus = cons.loanStatus;
var investStatus = cons.investStatus;
var taskCons = cons.taskCons;
var userBillCons = cons.userBillCons;

var config = require('mcp_config');
var ec = config.ec;
var prop = config.prop;

var service = require('mcp_service');
var digestService = service.digestService;
var kvService = service.kvService;
var taskService = service.taskService;
var userBillService = service.userBillService;

var LoanControl = function () {
};

LoanControl.prototype.handle = function (headNode, bodyStr, userCb) {
    var self = this;
    async.waterfall([
        //是否是支持的cmd
        function (cb) {
            if (typeof self['handle' + headNode.cmd] === 'function') {
                cb(null);
            } else {
                cb(ec.E2010);
            }
        },
        //校验头的用户类型是否合法
        function (cb) {
            var userTypeId = userType[headNode.userType];
            if (userTypeId == undefined) {
                cb(ec.E9030);
            }
            else {
                cb(null, userTypeId);
            }
        },
        //获得密钥
        function (userTypeId, cb) {
            digestService.getKey({fromType: prop.digestFromType.DB, userId: headNode.userId, userType: userTypeId},
                function (err, key) {
                    cb(err, key);
                });
        },
        //先解密
        function (key, cb) {
            var decodedBodyStr = digestUtil.check(headNode, key, bodyStr);
            if (decodedBodyStr == null) {
                cb(ec.E9020);
                return;
            }
            var bodyNode;
            try {
                bodyNode = JSON.parse(decodedBodyStr);
                headNode.key = key;
            }
            catch (err) {
                cb(ec.E0005);
                return;
            }
            cb(null, bodyNode);

        },
        //check the param
        function (bodyNode, cb) {
            var method = 'check' + headNode.cmd;
            self[method](headNode, bodyNode, function (err) {
                cb(err, bodyNode);
            });
        },
        //业务处理
        function (bodyNode, cb) {
            var cmd = 'handle' + headNode.cmd;
            self[cmd](headNode, bodyNode, cb);
        }
    ], function (err, bodyNode) {
        userCb(err, bodyNode);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC01 创建项目
 */

LoanControl.prototype.checkLC01 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC01 = function (headNode, bodyNode, cb) {
    async.waterfall([
        //生成id号
        function (cb) {
            kvService.getLoanId(function (err, id) {
                if (err) {
                    log.error(headNode.messageid + '获取loanId出错');
                    cb(ec.E9999);
                } else {
                    cb(err, id);
                }
            });
        },
        //插入数据
        function (id, cb) {
            bodyNode.cond.status = loanStatus.waiting_verify;
            bodyNode.cond.id = id;
            bodyNode.cond.create_time = dateUtil.getCurTime();
            var loan = dc.main.get('loan');
            loan.save(bodyNode.cond, [], function (err) {
                if (err) {
                    cb(ec.E9050);
                } else {
                    cb(null);
                }
            });
        }
    ], function (err) {
        cb(err);
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC02 初审项目
 */

LoanControl.prototype.checkLC02 = function (headNode, bodyNode, cb) {
    cb(null);
};


LoanControl.prototype.handleLC02 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.raising}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            //添加任务
            loan.findOne({id: bodyNode.id}, {'raise_time': 1}, [], function (err, rst) {
                var cond = {};
                cond.loan_id = bodyNode.id;
                cond.type = taskCons['recheck'];
                cond.fireTime = dateUtil.toDate(rst.raise_time).getTime();
                cond.description = '募集时间满，修改状态为复核';
                taskService.add(cond, function (err) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                });
            }, {dateToString: true});

        }
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC03 放款
 */

LoanControl.prototype.checkLC03 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC03 = function (headNode, bodyNode, cb) {
    var loanTab = dc.main.get('loan');
    var investTab = dc.main.get('invest');
    async.waterfall([
        //获取项目信息
        function (cb) {
            loanTab.findOne({id: bodyNode.id}, {}, [], function (err, loan) {
                if (err) {
                    cb(ec.E5020);
                } else {
                    cb(null, loan);
                }
            })
        },
        //处理投资人账户
        function (loan, cb) {
            if (loan.status == loanStatus.recheck) {
                var cursor = investTab.find({
                    loan_id: loan.id,
                    status: investStatus.bid_success
                }, {}, []).sort().limit(null, null, true);
                cursor.toArray(function (err, data) {
                    var actualMoney = 0;
                    async.eachSeries(data, function (set, callback) {
                        var money = set.money;
                        if (set.coupon_money != undefined) {
                            money = money - set.coupon_money;
                        }
                        userBillService.frozenOutMoney(set.user_id,
                            money,
                            userBillCons.payType.GIVE_MONEY_TO_BORROWER,
                            "投资成功，取出投资金额, 借款ID：" + loan.id, function (err) {
                                if (!err) {
                                    actualMoney += money;
                                    callback(null);
                                }else{
                                    callback(ec.E5030);
                                }
                            });
                    }, function (err) {
                        cb(err, loan, actualMoney);
                    });
                })
            } else {
                cb(ec.E5000);
            }
        },
        //处理借款人账户
        function (loan, actualMoney, cb) {
            userBillService.balanceInMoney(loan.repay_user_id,
                actualMoney,
                userBillCons.payType.GIVE_MONEY_TO_BORROWER,
                "借款到账, 借款ID：" + loan.id, function (err) {
                    if (err) {
                        cb(ec.E5010);
                    } else {
                        loanTab.update({id: loan.id}, {$set: {status: loanStatus.repaying}}, [], function (err) {
                            if(err){
                                cb(ec.E5040);
                            }else{
                                var cond = {};
                                cond.loan_id = loan.id;
                                cond.type = taskCons['calculate'];
                                cond.fireTime = new Date().getTime();
                                cond.description = '计算项目还款计划';
                                taskService.add(cond, function (err) {
                                    if (err) {
                                        cb(ec.E9999);
                                    } else {
                                        cb(null);
                                    }
                                });
                            }
                        });
                    }
                });
        }
    ], function (err) {
        cb(err);
    });
};

/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC04 延期
 */

LoanControl.prototype.checkLC04 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC04 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {
        $set: {
            status: loanStatus.raising,
            raise_time: bodyNode.raise_time
        }
    }, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            //添加任务
            loan.findOne({id: bodyNode.id}, {'raise_time': 1}, [], function (err, rst) {
                var cond = {};
                cond.loan_id = bodyNode.id;
                cond.type = taskCons['recheck'];
                cond.fireTime = dateUtil.toDate(rst.raise_time).getTime();
                cond.description = '募集时间满，修改状态为复核';
                taskService.add(cond, function (err) {
                    if (err) {
                        cb(ec.E9999);
                    } else {
                        cb(null);
                    }
                });
            }, {dateToString: true});
        }
    });
};


/**
 * @param headNode
 * @param bodyNode
 * @param cb
 * @Description  LC05 流标
 */

LoanControl.prototype.checkLC05 = function (headNode, bodyNode, cb) {
    cb(null);
};

LoanControl.prototype.handleLC05 = function (headNode, bodyNode, cb) {
    var loan = dc.main.get('loan');
    loan.update({id: bodyNode.id}, {$set: {status: loanStatus.cancel}}, [], function (err, data) {
        if (err) {
            log.error(headNode.messageid + '更新项目状态出错');
            cb(ec.E9999);
        } else {
            cb(null);
        }
    });
};


var loanControl = new LoanControl();
module.exports = loanControl;